import os
import logging
import asyncio
import sys
from aiogram import Bot, Dispatcher, html
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.types import Message
from dotenv import load_dotenv
from geopy.geocoders import Nominatim
import aiohttp

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")
API_KEY = os.getenv("WEATHER_TOKEN")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–æ–≤
if not TOKEN or not API_KEY:
    raise ValueError("BOT_TOKEN –∏–ª–∏ WEATHER_TOKEN –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")

dp = Dispatcher()



@dp.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {html.bold(message.from_user.full_name)}! "
        "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∏ —è –ø–æ–∫–∞–∂—É —Ç–µ–±–µ –ø–æ–≥–æ–¥—É ‚òÄÔ∏è"
    )



@dp.message()
async def weather_handler(message: Message) -> None:
    city_name = message.text.strip().replace("–ø–æ–≥–æ–¥–∞ –≤", "").replace("–ø–æ–≥–æ–¥–∞", "").strip()

    if not city_name:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
        return

    geolocator = Nominatim(user_agent="weather_bot")

    try:
        locations = geolocator.geocode(city_name, country_codes="RU", exactly_one=False)

        if not locations:
            await message.answer(f"–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {city_name}")
            return

        reply_lines = []
        selected_location = None

        for i, loc in enumerate(locations[:10], 1):
            if city_name.lower() in loc.address.lower():
                reply_lines.append(f"{i}. üìç <b>{loc.address}</b>")
                if not selected_location:
                    selected_location = loc

        if not reply_lines:
            await message.answer("–°–æ–≤–ø–∞–¥–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–Ω–æ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ—á–Ω–æ–º—É –≥–æ—Ä–æ–¥—É.")
            return


        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–≥–æ–¥—É
        if selected_location:
            lat, lon = selected_location.latitude, selected_location.longitude

            url = (
                f"http://api.openweathermap.org/data/2.5/weather"
                f"?lat={lat}&lon={lon}&appid={API_KEY}&units=metric&lang=ru"
            )

            async with aiohttp.ClientSession() as session:
                async with session.get(url) as response:
                    if response.status != 200:
                        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.")
                        return
                    data = await response.json()

            description = data["weather"][0]["description"].capitalize()
            temp = data["main"]["temp"]
            feels_like = data["main"]["feels_like"]
            humidity = data["main"]["humidity"]
            wind_speed = data["wind"]["speed"]

            await message.answer(
                f"üå¶ –ü–æ–≥–æ–¥–∞ –≤ <b>{city_name}</b>:\n"
                f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: <b>{temp}¬∞C</b> (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
                f"üí® –í–µ—Ç–µ—Ä: {wind_speed} –º/—Å\n"
                f"‚òÅÔ∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ: {description}"
            )

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã:")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")



# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main() -> None:
    bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    asyncio.run(main())
